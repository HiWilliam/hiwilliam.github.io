<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hiwilliam&#39;s Blog</title>
  
  <subtitle>死于安乐，生于忧患</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-04T14:02:15.181Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hiwilliam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker学习日志3-Dockerfile</title>
    <link href="http://yoursite.com/2019/07/04/Docker/Docker%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%973-Dockerfile/"/>
    <id>http://yoursite.com/2019/07/04/Docker/Docker学习日志3-Dockerfile/</id>
    <published>2019-07-04T08:43:53.000Z</published>
    <updated>2019-07-04T14:02:15.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    昨天，在我的电脑瞎捣鼓。看到docker-desktop上有kubs这个模块，在之前的学习查阅资料中接触和了解一点，就尝试着下载和安装。结果这一试就出现了毛病，kubs始终处于starting这个状态，而不是running。其次就是每次开机docker都会弹窗提示有问题，选只有三个 reset factory、reset kubs、cancel。试了几次reset kubs都不行，就心一横点了reset factory(恢复出厂设置)。结果就爆炸了，之前镜像，容器全没了。。。好吧，从头来过。不过这次我尝试这用dockerfile来实现。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="介绍与准备"><a href="#介绍与准备" class="headerlink" title="介绍与准备"></a>介绍与准备</h4><p>​        <strong>Dockerfile</strong>是docker提供的一种可以让开发者定制自己的镜像的构建方式，其实就是一个文本文件,通过build名来实现。文本的内容是docker规定的语法所描述。具体有哪些命令就不再一一叙述.请参考<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">官方文档</a></p><p>​    此次目的依旧明确，重新创建之前那样的lnmp开发环境。编辑器我用的是vscode，从中下了一个名为Better Dockerfile Syntax的插件。可实现dockerfile文档代码的自动高亮,同时也可安装Dokcer插件，可以直接在vscode中管理自己的docker，以及dockerfile的代码联想。</p><h4 id="初始文档"><a href="#初始文档" class="headerlink" title="初始文档"></a>初始文档</h4><p>​        首先创建dockerfile,一开始我以为创建dockerfile的名称随意。随便一个txt文档就行(因为我也是看教程学习的，教程说是文本)，但是果然是我太想当然了。docekrfile的文件名必须是dockerfile(没错文件名就是dockerfile,没有后缀名，大小写无所谓)。 </p><p>下面是我最初写的dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> Ubuntu:<span class="number">18.10</span> <span class="comment">#选定基础镜像</span></span><br><span class="line"><span class="keyword">RUN</span> apt-get install mysql-server #安装mysql </span><br><span class="line"><span class="keyword">RUN</span> apt-get install nginx #安装nginx</span><br><span class="line"><span class="keyword">RUN</span> apt-get install php7.2 php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl #安装php以及相关扩展</span><br><span class="line"><span class="keyword">RUN</span> apt-get install vim #安装vim</span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露 80 3306 9000 6379 端口备用</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> </span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="comment"># 设置www目录共享</span></span><br><span class="line"><span class="keyword">VOLUME</span> ["/WWW"]</span><br></pre></td></tr></table></figure><p>然后尝试这创建镜像 :</p><p><code>docker build [dockerfile path]</code></p><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><p>当然这里还有这很多问题，根据创建过程返回的错误，以及查询相关资料。做出以下修改</p><ol><li><p>FROM 等命令都用大写，FROM后面的镜像名必须为小写。即这里的Ubuntu:18.10 改为 ubuntu:18.10</p></li><li><p>经过多次测试，ubuntu自带的镜像源下载速度实在是太慢了。改为国内的镜像源</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="keyword">RUN</span> touch /etc/apt/sources.list \</span><br><span class="line">&amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse" &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>apt install 前要更新源！不然无法获取到包。同样dockerfile也许如此。对安装软件部分做出如下改写</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> apt-get update \</span><br><span class="line">    &amp;&amp;  apt-get install -y mysql-server \</span><br><span class="line">    &amp;&amp;  apt-get install -y gcc \</span><br><span class="line">    &amp;&amp;  apt-get install -y nginx \</span><br><span class="line">    &amp;&amp;  DEBIAN_FRONTEND="noninteractive" apt-get install -y php7.2 php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl \</span><br><span class="line">    &amp;&amp;  apt-get install -y vim</span><br></pre></td></tr></table></figure></li><li><p>在学习群中询问了一些大佬。他们给出了建议：端口越少暴露越好</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span> <span class="comment">#用户外部管理软件链接容器内的mysql</span></span><br></pre></td></tr></table></figure></li><li><p>为保证创建好的容器能供正常运行(至少有一个进程运行),添加下面配置</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span> ['/bin/bash']</span><br></pre></td></tr></table></figure></li></ol><h4 id="文档释义"><a href="#文档释义" class="headerlink" title="文档释义"></a>文档释义</h4><p>​    在dockerfile中句尾的“\”代表换行，“&amp;&amp;”表示链接 。</p><p>​    在【3】中的每个安装都添加-y直接通过linux安装过程中询问过程。</p><p>​    在php的安装前面添加了<code>DEBIAN_FRONTEND=&quot;noninteractive&quot;</code>,这是因为php安装过程有交互操作。但是dockerfile的build过程是无法从键盘输入的，所以直接屏蔽交互操作，以免构建过程失败。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    只有在不断的折腾中，才能了解和学习新的东西。这是我始终坚持的信条。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    昨天，在我的电脑瞎捣鼓。看到docker-desktop上有kubs这个模块，在之前的学习查阅资料中接触和了解一点，就尝试着下载和
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Composer学习日志1</title>
    <link href="http://yoursite.com/2019/07/04/Composer%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%971/"/>
    <id>http://yoursite.com/2019/07/04/Composer学习日志1/</id>
    <published>2019-07-03T16:13:23.000Z</published>
    <updated>2019-07-04T08:43:02.843Z</updated>
    
    <content type="html"><![CDATA[<p>暂时为空</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;暂时为空&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Composer" scheme="http://yoursite.com/tags/Composer/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Dokcer学习日志2-搭建lnmp</title>
    <link href="http://yoursite.com/2019/06/30/Docker/Dokcer%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%972-%E6%90%AD%E5%BB%BAlnmp/"/>
    <id>http://yoursite.com/2019/06/30/Docker/Dokcer学习日志2-搭建lnmp/</id>
    <published>2019-06-30T07:54:41.000Z</published>
    <updated>2019-07-04T14:02:25.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    前面介绍了docker基本概念和基本的入门操作命令。那么今天就开始尝试这搭建web开发环境。不管好不好用，尝试了才有资格评价。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><p>​    我个人最喜欢的Linux发行版是Ubuntu，也掌握了一些命令。所以就不再折腾Centos了,反正换汤不换药。</p><h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><p>​    默认拉取latest标签的ubuntu镜像</p><p>​    <code>docker pull ubuntu</code></p><h5 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h5><p>​    <code>docker run -it  -v d:/www:/var/www -p 127.0.0.1:80:80 -p 127.0.0.1:3306:3306 -p 127.0.0.1:9000:9000  ubuntu /bin/bash</code></p><p><code>-v d:/www:/var/www</code>：设置宿主机d:/www与容器ubuntu /var/www 文件绑定共享</p><p><code>-p 127.0.0.1:80:80 -p 127.0.0.1:3306:3306 -p 127.0.0.1:9000:9000</code>：映射宿主机的80，3306，9000端口到容器的80，3306，9000端口</p><p><strong>注意</strong>：因为容器创建后再给容器绑定共享文件、和映射端口，这里就直接在创建的时候就做好准备。</p><h5 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h5><p>​    重命名新建容器为lnmp</p><p>​    <code>docker container rename [container id] lnmp</code></p><p>​    进入容器</p><p>​    <code>docker exec -it lnmp /bin/bash</code></p><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><h5 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h5><p>​    <code>apt install php7.2</code></p><p>​    以及相关扩展，这里就不再详细写了<a href="https://blog.csdn.net/qq_16885135/article/details/79747045" target="_blank" rel="noopener">扩展链接</a></p><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><p>​    以下基本与docker无关了，是linux下配置的lnmp的操作流程，这里一并写上。</p><h5 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h5><p>​    安装mysql</p><p>​    <code>apt  update</code></p><p>​    <code>apt install mysql-server</code>    </p><p>​    因为已经我们之前创建容器时，就已经映射好3306端口，因此无需再配置。</p><p>​    <code>service mysql status</code>：查看mysql服务状态</p><p>​    <code>service mysql start</code>:  开启mysql服务</p><h5 id="链接mysql"><a href="#链接mysql" class="headerlink" title="链接mysql"></a>链接mysql</h5><p>​    在宿主机打开数据库图形管理软件(我的是navicate)，新建链接。<img src="/images/navicat.png" alt></p><p> 和一般本地数据链接无异。但是这样很可能无法链接。会有报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lost connection to MySQL server at &apos;reading initial communication packet&apos;</span><br></pre></td></tr></table></figure><p><strong><em>解决方法</em></strong>: 在容器中找到mysqld.conf配置文件，注释<code>bind_address 127.0.0.1</code>。(请事先安装vim)，</p><p>再次尝试链接会报错 ：</p><p><code>Access denied for user &#39;root&#39;@&#39;%</code>类似错误说明是权限问题。</p><p><strong><em>解决方法</em></strong>:进入容器ubuntu中的mysql，输入以下命令</p><p><code>grant all privileges *.* to &#39;root&#39;@&#39;%&#39; by &#39;your password&#39; with grant option;</code></p><p><code>flush privileges;</code></p><p>退出并重启mysql。再次链接成功。(目前我遇到这两个问题)</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><h5 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h5><p>直接从Ubuntu的默认软件仓库中获取即可，与mysql差不多</p><p><code>apt update</code></p><p><code>apt install nginx</code></p><h5 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h5><p>添加nginx虚拟主机(php)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-available</span><br><span class="line">cp default newhost</span><br><span class="line">vim newhost</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;                                                                               listen [::]:80;                                                                        server_name wh.api.com;  </span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.php?$query_string;                                 </span><br><span class="line">if (!-e $request_filename)&#123;                                                              rewrite  ^/(.*)$  /index.php?s=/$1  last;      </span><br><span class="line">&#125;         </span><br><span class="line">&#125;</span><br><span class="line">location ~ \.php$ &#123; </span><br><span class="line">root /www/RestfulApiWithTp5/public;   </span><br><span class="line">        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock; </span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a>测试链接</h4><p>​    在主机打开浏览器输入虚拟主机域名。我这里是wh.api.com.。如果出现nginx 欢迎页面说明环境搭建基本ok。</p><p>（可能会是apache的欢迎页面，应该是index.html文件重名了）</p><p>​    如果出现链接失败请自行排除。推荐查看nginx错误日志，同样MySQL也最好看日志来找问题所在</p><p>​    <code>cat /etc/log/mysql/error.log</code>: 查看mysql错误日志</p><p>​    <code>cat /etc/log/nginx/error.log</code>: 查看nginx错误日志</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    至此，我的php web开发环境基本就ok了。当然这期间我耗费不少时间和精力。很多现有的解决方法并不适合自己。只能自己瞎摸索，幸运的是我还是爬出了这个小坑(还有更多的深坑等着我)。</p><p>​    最后调用自己的写的api，并且成功返回数据的那一刻，无疑是充满成就感的，吃了一个桃子奖励自己.:joy:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    前面介绍了docker基本概念和基本的入门操作命令。那么今天就开始尝试这搭建web开发环境。不管好不好用，尝试了才有资格评价。&lt;/
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习日志1-基础入门</title>
    <link href="http://yoursite.com/2019/06/29/Docker/Docker%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%971-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/06/29/Docker/Docker学习日志1-基础入门/</id>
    <published>2019-06-29T15:44:00.000Z</published>
    <updated>2019-07-04T14:09:43.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    从事web开发的我，每次更换开发环境、或者办公地点等原因时，总是要重新配置环境，下载wamp、xampp或者studyphp等集成开发环境。虽然熟悉后很是便捷，但是实际上还是会遇到不少的问题</p><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>​        经常出现起到安装、启动等问题。尤其是wamp这个坑爹玩意儿，当初第一次接触时还觉得它高大上，非常方便，酷炫、人性化。但是一段时间使用后，发现每次安装都会出现各种稀奇古怪的问题，例如缺少.dll文件，apche或mysql总有一无法启动，百度半天也不一点能搞定。着实令人头疼。</p><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>​        正式步入工作岗位后，正式线上服务器基本都是linux(绝大多数是云服务器，例如阿里云)。然而我们开发环境基本也都是windows。虽说现在一些发行版linux系统还是很强大的。但是真正开发环境跑的少之又少(反正我到现在只遇到一个。虚拟机不算)，故而有可能会发生本地运行测试通过的程序，到了线上会挂掉。这个要是慢慢去找找的，没一点时间真的不好解决(就我目前的技术水平，大佬们除外)。</p><h4 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h4><p>​        综上所言，的确需要一个方法去解决。曾有人推荐我用虚拟机，但是不知为何我对它不是很感兴趣。后来遇见了docker方面相关的文章，还有一次同事的提及，因此我决定尝试了解docker这个玩意儿。</p><h3 id="基本概要"><a href="#基本概要" class="headerlink" title="基本概要"></a>基本概要</h3><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>​        关于docker的一些诞生，发展等相关介绍，我就不想在去写，了解一下就行了。这里提一个链接<a href="http://www.dockerinfo.net/document" target="_blank" rel="noopener">DockerInfo</a>。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>Docker 是一个轻量级的容器，因此它可以在很短的时间内启动和关闭。</p></li><li><p>Docker容器能够帮助开发人员、系统管理员、QA和版本控制工程师在一个生产环节中一起协同工作。</p></li><li><p>Docker 容器可以运行在大多数的环境中，你可以在桌面环境、物理主机、虚拟主机再到数据中，私有或者公有云中部署</p></li><li><p>等等(以上皆引用于<a href="http://www.dockerinfo.net/document" target="_blank" rel="noopener">DockerInfo</a>,以为觉得比较重要，单独拎出)</p></li></ul><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    在使用docker之前需要理解一下，docker中的相关概念，不然贸然上手，可能会晕头转向。</p><p>​        <strong><em>镜像(image)：</em></strong>可以理解为安装包，就像系统时我们下载的系统镜像，同一个道理。</p><p>​        <strong><em>容器(container)：</em></strong>是通过镜像实例化后得到，类似于通过系统镜像安装后的系统。也可以类和对象的关系</p><p>​        <strong><em>镜像仓库(repository)：</em></strong>是专门存放的一类镜像(主要起分类)。有官方和第三方之别</p><p>​        <strong><em>注册服务器(registry)：</em></strong>用来管理镜像仓库</p><p>​        <strong><em>标签(tag)：</em></strong>标记一个镜像。便于快速查找镜像的版本。默认latest</p><p>​    以上是docker的一些基本名词释义(基于已有文档，简单入门操作，以及自己的一些理解。如果有误请多指正)，因为一开始使用时，不懂这些概念才导致踩了很多坑。因此在这里着重记上一笔。</p><h4 id="入门操作"><a href="#入门操作" class="headerlink" title="入门操作"></a>入门操作</h4><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><p>​    首先根据自己的需求从镜像仓库拉取所需的镜像。</p><p>​            <code>docker pull [image name]</code>：默认拉取tag 为latest的镜像,- a 参数是拉取该镜像名的所有镜像。</p><p>​            <code>docker image ls</code>：可查看当前已有的镜像。</p><p>​            <code>docker image rm imageID</code>:删除id为imageID的镜像。</p><p>​            <code>docker image -help</code>:查看image命令相关帮助</p><p>​        目前，以上命令最为常用。</p><p>​        我这里是拉取了ubuntu:18.10 latest镜像。</p><p>​            <code>docker pull ubuntu</code></p><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>​    拉取好镜像后，就是实例化镜像，就是生成容器，docker提供了多种方式来生成容器</p><p>​        <code>docker create [image name]</code>:创建一个新容器</p><p>​        <code>docker run [image name]</code>:创建并运行一个新容器，如果本地没有指定的镜像，就尝试从仓库拉取</p><p>​    个人推荐run命令来操作，同时可以通过添加-it来实现交互操作，例如shell。</p><p><strong>注意</strong>：docker容器有独特机制,即必须有一个前台进程运行，否则就会自动退出关闭，所以，新建容器经常会遇到无论怎么开启容器，ps -a状态一看总是exited。导致无法进入容器工作。</p><p>​    所以最好是运行时就开启一个交互操作，来保证容器不会自动关闭。即</p><p>​    <code>docker run -it [container id] /bin/bash(bash path)</code></p><p>那么这样的话，进入容器就要用exec</p><p>​    <code>docker exec -it container id /bin/bash (bash path)</code></p><p>​    其实docker进入容器还有attach命令，但是，attach命令方式进入会默认进入我们创建时所开启的交互操作，那么当我们退出时，又会导致这个交互操作也随之结束，造成容器关闭。而exec则是新建交互操作。不影响原有交互操作。(具体的请自行实验)</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>​    关于docker还有一些常用命令：</p><p>​        <code>docker ps</code>:列出所有正在运行的容器，-a 列出所有状态的容器</p><p>​        <code>docker stop/start/restart [container id]</code>:停止/开启/重启容器</p><p>​        <code>docker rename [container id] [new name]</code>:重命名容器(非常实用)</p><p>​        <code>docker commit [container id/container name]</code>:将容器打包为一个镜像。</p><p>​    当然还有很多命令，这些只是我目前所常用，具体见<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">docker命令</a>。</p><h4 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h4><p>​    补充一些其他的东西：</p><ol><li>修改docker镜像源，docker官方的镜像源是真的慢。下个mysql镜像能等半个小时。这里我用的是<a href="https://www.daocloud.io/mirror" target="_blank" rel="noopener">DAOcloud</a></li><li>windows的Docker Desktop默认的NetWork的DNS设置成fixed。否则在以后的操作中可能出现问题。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    这篇文章主要是记一下对docker的介绍，为何而使用，以及基本入门操作。因为是新手，我在最开始的简单的拉取镜像，创建容器等过程中都踩了不少坑，遇到不小的困难。不过也正是这些坑让我对docker以及docker的命令有了更深的理解。因为我是php web开发。所以打算弄一个继承环境来玩玩。(我的真机环境是win10 pro insider preview )。</p><p><strong><em>如果有错请指正，不甚言谢</em></strong></p><p>​        </p><p>​            </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    从事web开发的我，每次更换开发环境、或者办公地点等原因时，总是要重新配置环境，下载wamp、xampp或者studyphp等集成
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>windows terminal 预览版个性化设置</title>
    <link href="http://yoursite.com/2019/06/26/Tools/windows-terminal-%E9%A2%84%E8%A7%88%E7%89%88%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/06/26/Tools/windows-terminal-预览版个性化设置/</id>
    <published>2019-06-26T13:12:38.000Z</published>
    <updated>2019-06-26T14:30:40.396Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>很早之前就看到Microsoft放出新终端的消息，还有预告片，十分炫酷，就一直惦记着。最近终于放出预览版，故尝尝鲜。win10系统直接在应用商店中搜索windows terminal即可。注意安装有系统版本的要求。</p><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>安装好后就直接固定到开始屏幕方便打开。页面什么都就不具体介绍了，主要是折腾一下外观主题。在官方预告片中，它的效果很好看，有毛玻璃，多色彩等特点。现在好的貌似和原有的cmd，powershell等工具差不多。所以需要自己来设置。通过下拉选项中setting来设置 json</p><ul><li><p><strong><em>毛玻璃</em></strong><br>修改<code>acrylicOpacity</code>属性为0.5 同时要开启<code>userAcrylic</code></p></li><li><p><strong><em>主题设置</em></strong><br>默认主题为<code>Campbell</code>,配置文件默认已经在下面配置好了五种主题,我个人比较喜欢<code>One Half Dark</code>,当然也可自己定义一个主题。</p></li></ul><h4 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h4><p>目前windows termianal 还是预览版，正式版要到11月份好像才公布。所以还是有很多不足之处的。例如选项卡总是显示的执行exe文件的全路径，看起来非常丑还很占空间。有时会出现白色遮罩层在上面，就像程序无反应那种。还有就是我安装了wsl所以带有了Ubuntu的termial，但是他的图标确实linux的小企鹅，相对来说，我更喜欢Ubuntu的图标。<br>目前这个项目已经在github上开源，有很多开发者提交了意见。<a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener">Windows Termial GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h4&gt;&lt;p&gt;很早之前就看到Microsoft放出新终端的消息，还有预告片，十分炫酷，就一直惦记着。最近终于放出预览版，故尝尝鲜。win10系统直接在应用
      
    
    </summary>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>项目总结三-日常反思</title>
    <link href="http://yoursite.com/2019/05/30/experience/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B8%89-%E6%97%A5%E5%B8%B8%E5%8F%8D%E6%80%9D/"/>
    <id>http://yoursite.com/2019/05/30/experience/项目总结三-日常反思/</id>
    <published>2019-05-30T15:13:08.000Z</published>
    <updated>2019-05-30T15:51:46.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>今天写代码入了神，加班到了九点，回来已经十一点了。。。，照例写了下这篇blog，反思一下今日的进度</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="json的运用"><a href="#json的运用" class="headerlink" title="json的运用"></a>json的运用</h4><p>不得不说，我的基础实在的薄弱，虽然接触json这种数据类型已经很久了，但是对它依旧是一知半解。这也导致了今天开发过程遇到那些麻烦事、具体的就不再细说，主要是对于json在api的中的运用还是很迷糊。对于json数据的处理也是糊涂。为记忆深刻在这里写点东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//以下来自百度百科</span><br><span class="line">对象表示为键值对</span><br><span class="line">数据由逗号分隔</span><br><span class="line">花括号保存对象</span><br><span class="line">方括号保存数组</span><br><span class="line">//以下为自己所熟悉或理解</span><br><span class="line">json其实就是一个对象的字符串表示法。</span><br><span class="line">在php中</span><br><span class="line">    array=&gt;json json_encode($arr);</span><br><span class="line">    array=&gt;json json_encode(JSON_UNESCAPED_UNICODE) //中文不转为unicode</span><br><span class="line">    array=&gt;json json_encode(JSON_UNESCAPED_SLASHES) //不转义反斜杠</span><br><span class="line">    json=&gt;array json_decode($arr,true);</span><br><span class="line">    json=&gt;object json_decode($arr);</span><br><span class="line">json的key=&gt;value value可以是任意的数据类型</span><br></pre></td></tr></table></figure></p><h4 id="redis各种数据的使用"><a href="#redis各种数据的使用" class="headerlink" title="redis各种数据的使用"></a>redis各种数据的使用</h4><p>经过这几日的项目运用，我对redis的数据类型以及用法有了基本的认知。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>string是redis最基本的存储数据类型，例如redis的key就是string类型，当然其他数据类型的内部也可以使用string来存储数据。</p><h4 id="hashmap"><a href="#hashmap" class="headerlink" title="hashmap"></a>hashmap</h4><p>虽然还没有在项目中真正使用到HashMap这个数据类型，但是对于也有了基本的认知，在看过一些资料后，得知Hashmap内部其实还是kv的形式来存储数据</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>集合这段时间一直接触，set(集合)是一种String类型的无序集合，且集合数据是唯一的，所有适合存放不能重复的数据。例如项目中的个人浏览足迹不可重复，商品收藏不可重复。</p><h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h4><p>有序集合这个和set类似，也是一种不可重复的集合，不过可以通过存入一个score(double类型)来控制顺序。因而项目中的浏览足迹更改为zset来存储，把访问时间戳作为score实现排序，具体的value保存为时间戳和商品id用下划线拼接类似：11111122222_3333333。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一些废话&quot;&gt;&lt;a href=&quot;#一些废话&quot; class=&quot;headerlink&quot; title=&quot;一些废话&quot;&gt;&lt;/a&gt;一些废话&lt;/h3&gt;&lt;p&gt;今天写代码入了神，加班到了九点，回来已经十一点了。。。，照例写了下这篇blog，反思一下今日的进度&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="项目反思" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="-php -redis" scheme="http://yoursite.com/tags/php-redis/"/>
    
  </entry>
  
  <entry>
    <title>项目总结二-redis基础认知</title>
    <link href="http://yoursite.com/2019/05/29/experience/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%BA%8C-redis%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/05/29/experience/项目总结二-redis基础认知/</id>
    <published>2019-05-29T14:38:26.000Z</published>
    <updated>2019-05-30T15:52:09.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>今天主要还是写负责项目的个人中心的一些部分，例如浏览足迹和商品收藏，在边写边学边问的情况，对项目的整体的架构和一些技术有了更深的认知。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="浏览足迹"><a href="#浏览足迹" class="headerlink" title="浏览足迹"></a>浏览足迹</h4><p>昨天下班时，写了个大概的流程，今日来具体实现，但是在这过程中，对于业务逻辑不断的做修改和重构。例如昨日的思路是将浏览足迹的相关user_id和product_id存入redis的list中(lpush)，<br>再通过while(true)来取出数据(rpop)并存入mysql的history表中。然而经过讨论，历史足迹有过期时间，且可以点击进入详情页，然而我们的product表是定时更新，且所有数据都要更新，那么就不能在通过product_id从mysql查出数据给到详情页。综合考虑，替换为另一种方案：取消将足迹相关数据存入list的队列，以及持久化到mysql，取而代之为将其存入set中并另建key的set来存放product info，且这里的info由前端实时的从数据源取得，保证数据的实时性。另外为两个set都添加过期时间30天设定(expire)。<br>当然这样做还是有不足的，例如在后来的写足迹列表时，发现需要分页，那么经过查找资料，这里足迹数据存储类型改为zset更为合适，并以浏览时间(date(‘Ymd’))为scroe。既保证了有序性和唯一性，且便于分页。<br>在查找redis数据分页时，我看到很多都是用hashmap和zset组合来完成，目前还没有理解这样做的缘由，待日后深入的理解。</p><h4 id="收藏商品"><a href="#收藏商品" class="headerlink" title="收藏商品"></a>收藏商品</h4><p>其实今天真正写的代码不多，主要还是业务逻辑思考。所以收藏商品并没有时间去完成，不过已经流程基本理顺。基本如下<br>1:将收藏关联id(user_id,product_id)存入zset<br>2:将收藏的product info 存入set<br>3：定时将product info 转存如list队列，并循环持久化到mysql<br>具体细节参考上面。不足之处，明日再来补充。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>因为要赶项目进度，今天开始正式加班，到8.20左右下班，10.20到家，收拾收拾已经11点多了。试用期两个月，至少这两个月都将会是这个状态，不过也没什么好说的，一年的荒废换的两个的刻苦也还可以。至少这两天的学习成果还是有的，毕竟得有技术才能走下去。废话不多说了，明天还得早起。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一些废话&quot;&gt;&lt;a href=&quot;#一些废话&quot; class=&quot;headerlink&quot; title=&quot;一些废话&quot;&gt;&lt;/a&gt;一些废话&lt;/h3&gt;&lt;p&gt;今天主要还是写负责项目的个人中心的一些部分，例如浏览足迹和商品收藏，在边写边学边问的情况，对项目的整体的架构和一些技术有了更
      
    
    </summary>
    
      <category term="项目反思" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="-php -redis" scheme="http://yoursite.com/tags/php-redis/"/>
    
  </entry>
  
  <entry>
    <title>项目总结一-redis初使用</title>
    <link href="http://yoursite.com/2019/05/28/experience/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B8%80-redis%E5%88%9D%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/05/28/experience/项目总结一-redis初使用/</id>
    <published>2019-05-28T13:57:38.000Z</published>
    <updated>2019-05-30T15:52:35.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h3><p>入职第二天，开始动手写代码。上午简单写了两个接口，分别时添加到收藏夹和删除收藏夹的商品，下午简单学习了redis和消息队列相关知识，照项目里面已经写好的redis部分，照葫芦画瓢。想学会模仿，才能学会怎么用，再到理解。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="收藏夹api"><a href="#收藏夹api" class="headerlink" title="收藏夹api"></a>收藏夹api</h4><p>这个接口其实没什么难度，就是基本的增删改查，只是业务逻辑上要简单考虑下，例如添加商品到收藏夹，体现在数据库上则是收藏夹表，添加一条带有user_id和product_id的记录。在这个项目里面它的表还带有一个自增id。在考虑不能重复收藏的时，一开始同事让我试试组合唯一索引。通过这种方式来自动实现收藏表中的user_id和product_id的组合唯一不重复的。但是后来考虑到另外一个list(当前用户所有收藏的商品)接口,会使用到user_id字段，从而使得这个组合唯一索引失效，因而放弃(这里留个问号，等实践去验证)。<br>代替上面索引的方法就是先判断数据库有没有这条收藏记录，如果有则添加失败。</p><h4 id="历史足迹api"><a href="#历史足迹api" class="headerlink" title="历史足迹api"></a>历史足迹api</h4><p>下午开始写浏览商品足迹的api，还是基本的增，删，查操作。但是考虑到高并发下，采用redis实现消息队列异步的插入数据，即在将数据插入redis的list中，在通过循环不断的取出队中的数据，存入数据库，如果队列为空则睡眠一段时间，再继续循环获取(待完善)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一些废话&quot;&gt;&lt;a href=&quot;#一些废话&quot; class=&quot;headerlink&quot; title=&quot;一些废话&quot;&gt;&lt;/a&gt;一些废话&lt;/h3&gt;&lt;p&gt;入职第二天，开始动手写代码。上午简单写了两个接口，分别时添加到收藏夹和删除收藏夹的商品，下午简单学习了redis和消息队列相
      
    
    </summary>
    
      <category term="项目反思" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="-php -redis" scheme="http://yoursite.com/tags/php-redis/"/>
    
  </entry>
  
  <entry>
    <title>php基础知识查漏补缺</title>
    <link href="http://yoursite.com/2019/05/27/php%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://yoursite.com/2019/05/27/php基础知识查漏补缺/</id>
    <published>2019-05-27T12:44:24.000Z</published>
    <updated>2019-05-28T13:55:06.159Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h4><p>入职第一天，先熟悉下环境，了解下状况。搭配好开发环境后，没有立即开始敲代码，而是在同事指导下看起项目代码，毕竟新人刚进来，直接动代码有点不靠谱。虽然有点静不下心，但多少有点收获。</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h3 id="list方法"><a href="#list方法" class="headerlink" title="list方法"></a>list方法</h3><p>这是php自带的方法，但是我在看项目代码时，一直不明白，以为是自定义的方法。这也说明了自己的php基础还是非常弱的。<br>函数将数组的值赋值给参数,用法如下：<br><code>list($param1,$params2,..) = $array(1,2,3) //注意php5中赋值顺序为从右想左，php7中为从左向右</code></p><h3 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h3><p>关键词，类似class，但是无法实例化，其实是一种代码服用技术，为php单继承机制提供了灵活的复用机制，通过use(类中)来引用，且引用了trait的方法的优先级比普通继承的父类方法要高。<br>今天看代码时，很多接口控制器都没有增删改查的方法，但是路由都可用，一开始没整明白，直到旁边同事点明，才知晓。还是基础不扎实的缘故。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一些废话&quot;&gt;&lt;a href=&quot;#一些废话&quot; class=&quot;headerlink&quot; title=&quot;一些废话&quot;&gt;&lt;/a&gt;一些废话&lt;/h4&gt;&lt;p&gt;入职第一天，先熟悉下环境，了解下状况。搭配好开发环境后，没有立即开始敲代码，而是在同事指导下看起项目代码，毕竟新人刚进来，直
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>scp -t错误</title>
    <link href="http://yoursite.com/2019/05/22/questions/scp-t%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2019/05/22/questions/scp-t错误/</id>
    <published>2019-05-22T15:13:06.000Z</published>
    <updated>2019-05-22T15:24:28.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="预期目的"><a href="#预期目的" class="headerlink" title="预期目的"></a>预期目的</h3><p>这几天在重拾git操作，尝试着在我的ubuntu笔记本上建立一个git仓库。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在实际操作中，通过查阅资料得知需要将id_rsa.pub 传递到Ubuntu笔记本上，网上给的建议是通过scp命令来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp id_rsa.pub git@192.168.2.102:/home/git/.ssh </span><br><span class="line">//本地.ssh 目录下操作</span><br></pre></td></tr></table></figure></p><p>实际操作中，链接应该ok，应为有密码输入的消息返回，输入用户密码后却返回错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: unrecognized command &apos;scp -t /home/git/.ssh&apos;</span><br><span class="line">lost connection</span><br></pre></td></tr></table></figure></p><p>查找资料后，发现scp并没有-t选项，但是我在命令里面也没有写-t选项啊。至此问题停留在这儿。希望有遇到朋友或者知晓大佬解惑。不甚言谢。</p><h3 id="问题状态"><a href="#问题状态" class="headerlink" title="问题状态"></a>问题状态</h3><p>未解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;预期目的&quot;&gt;&lt;a href=&quot;#预期目的&quot; class=&quot;headerlink&quot; title=&quot;预期目的&quot;&gt;&lt;/a&gt;预期目的&lt;/h3&gt;&lt;p&gt;这几天在重拾git操作，尝试着在我的ubuntu笔记本上建立一个git仓库。&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="questions" scheme="http://yoursite.com/categories/questions/"/>
    
    
      <category term="questions" scheme="http://yoursite.com/tags/questions/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="scp" scheme="http://yoursite.com/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>5.22面试</title>
    <link href="http://yoursite.com/2019/05/22/diary/%E6%97%A5%E5%BF%972-5.22%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2019/05/22/diary/日志2-5.22面试/</id>
    <published>2019-05-22T09:29:20.000Z</published>
    <updated>2019-05-28T14:22:03.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h3><p>在经过一个月准备，咸鱼了12天后我终于有了offer。不得不说，一次次的投递，一次次的无回复着实折磨这我的神经，虽然相对那些一两个月没有offer，我算是幸运的了。但是不得不说这份offer的确让我成长了不少。一是之前一年的工作岗位学习到东西实在很少，至少在php开发这个方向实在寥寥无几，没有技术，就没有底气。我一直担心着能否有单位选择我。二是心里压力。不得不说，在很多方面我是幸运的，因为是本地户口，没有太多的生活压力，父母也没有给我太多压力，一个月不行，就两个月，两个月不行，就三个月。反正开销都是在家里。但是正因为是这样心里过意不去，毕竟我已经是个成年人，像个蛀虫样啃老不是我要想要的生活。所以今日的面试着实给我提了一口气。下面我总结了几次面试(次序不按时间排序)</p><h4 id="滨江-面试"><a href="#滨江-面试" class="headerlink" title="滨江 面试"></a>滨江 面试</h4><p>说实话，我已经去滨江面试好几次了。</p><h3 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h3><p>面试安排在辞职后的那个周日，没错！就是周日面试，在58上投的简历，hr说要周日下午三点，然而等我到那儿之后，却被告知周日不上班。。。真的是无语，通知hr也没回应，知道两天后才给我回应，简单抱歉一下，还顺带问我会不会切图。。。我***。</p><h3 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h3><p>这一次则是很正常的流程，填写个人信息，笔试题题目，走人。。。没错就是直接走人，因为没通过笔试，但这只能怪自己学艺不精，技术不过关。其实我本来报的期望也不高，但是这次面试也收获了不少，至少知道自己的不足之处。就比如说下面试题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请写出三个php7的新特性</span><br><span class="line">请写出PSR规范</span><br><span class="line">请写出写出三个你熟悉的设计模式</span><br><span class="line">请根据下面代码补全单元测试代码（代码省略）</span><br><span class="line">请写出Xdebug的配置参数</span><br><span class="line">请写出Yii2的接受请求参数的方法</span><br><span class="line">请写出用PDO写出一个查询方法（具体省略）</span><br><span class="line">请写出一个链路数据。。。（记不清了）</span><br><span class="line">等等</span><br></pre></td></tr></table></figure></p><p>上面前三个题目我只会第三个设计模式，而且也是一知半解，单元测试没用到过，不会！Xdebug用到过，但是配置是网上百度直接Ctrl c +Ctrl v的，不会！Yii2框架没用过，不会！PDO会用，随便写了一下，但是基本模糊不清，链路数据，这他妈什么玩意儿听都没听过。也就是说整个试卷我只写出了一题，还真是个“人才”啊。不过既然没啥希望，那就从中反思。了解自己的不足，已备将来的面试。说到底我在技术方面的欠缺还是上面所说的，之前的单位没有这样的环境去让我接触，学习并应用。一年多写的最多的是html的样式，而且是那种用别人写好的前端框架在此基础上改改，目的达到即可，没有优化一说，没有挑战一说，甚至连我们代码领导都没怎么看过，能用就行了。平平淡淡的工作一年。</p><h3 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h3><p>这一次就是今天的面试，距离上次的面试已经过去了一个礼拜，在这个礼拜里面，我疯狂的学习着，从php基础到开发环境搭建，从mysql到redis，从设计模式到编码规范，我基本一天一个样式，我知道这种做法对技术水平没有任何帮助，但是至少可以让我应付一下面试这一关，等到入了职，再深入的了解和学习。不过还是很幸运的是，面试官并没有问道这些，他问的很广，很模糊。所以我也就照实的按照自己的想法回答了，。不管怎么说，面试算是过了，也基本可以确定offer了，就等我回复(因为我接着还有一场面试，所以就没急着给回复了)。</p><h4 id="江干-面试"><a href="#江干-面试" class="headerlink" title="江干 面试"></a>江干 面试</h4><p>江干区这个地方可真是让我又爱又恨。我大学三年都是在这儿度过，又在这里找到了实习工作，正式工作也是在这儿，还一干就是一年，留下了不少的回忆。但是美好的也有不足的地方，具体的就不细说了。</p><h3 id="第四次"><a href="#第四次" class="headerlink" title="第四次"></a>第四次</h3><p>这个面试其实并不是很正式，面试的单位也是我实习单位，但是经过了解，还是不适合我。</p><h3 id="第五次"><a href="#第五次" class="headerlink" title="第五次"></a>第五次</h3><p>这次面试也是今天，就在第三次之后的面试。这次面试过程简洁但是不简单（其实就是自己基础不扎实）。面试官是技术人员，第一个问题就是网络攻击一类，我直接摇头像个拨浪鼓。。。这谁顶得住。然后问了php的数组函数，字符操作，数据库操作，tp框架，还有git的操作，可以看出他是按照我的简历写的能力来的。但是简历上的东西都是我夸大了点的。。。哎，感觉凉了一半，之后便说了等通知。</p><h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><p>这几次面试，给我的收获还是很大的，毕竟有了失败才有前进的动力和方向。几次失败的面试，问的问题关注的点都差不多，那么我就朝这个方向补充即可。不管怎么说还要有所准备的。做好失败的准备，坚持总会有所获得。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面试总结&quot;&gt;&lt;a href=&quot;#面试总结&quot; class=&quot;headerlink&quot; title=&quot;面试总结&quot;&gt;&lt;/a&gt;面试总结&lt;/h3&gt;&lt;p&gt;在经过一个月准备，咸鱼了12天后我终于有了offer。不得不说，一次次的投递，一次次的无回复着实折磨这我的神经，虽然相对那些
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装nginx</title>
    <link href="http://yoursite.com/2019/05/20/linux/Linux%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://yoursite.com/2019/05/20/linux/Linux安装nginx/</id>
    <published>2019-05-20T08:55:48.000Z</published>
    <updated>2019-05-20T10:08:33.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>自从接触web开发以来，一直是在apache环境下进行开发的，最近看了很多面试要求，都有涉及到nginx，所以简单的尝试一下。</p><h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><p>开始安装前，需要下载安装包，不过在linux下直接通过wget来下载好了。打开<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx官网</a>,其中分为三个版本<br><strong>Mainline versions</strong>:主干版本，也就是开发版本<br><strong>Stable versions</strong>:稳定版本<br><strong>Legacy versions</strong>：历史版本<br>我选择了<a href="http://nginx.org/download/nginx-1.16.0.tar.gz" target="_blank" rel="noopener">Stable versions</a>(这里是1.16.0)，右键复制下载链接,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.16.0.tar.gz //开始下载</span><br><span class="line"></span><br><span class="line">tar -xzvf nginx-1.16.0.tar.gz  //解压</span><br></pre></td></tr></table></figure></p><p>随后开始编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nigx //配置 这里的路径是设置nginx安装的路径</span><br><span class="line"></span><br><span class="line">make //开始编译(报错请看下面注意事项)</span><br><span class="line"></span><br><span class="line">make install //开始安装</span><br></pre></td></tr></table></figure></p><p>进行到这一步，不出意外的话，基本安装完成。开始测试,此时如果直接按照nginx命令可能会报错<br><code>nginx command not found</code><br>这是因为nginx命令还未配置，只能在安装目录/usr/local/nginx/sbin下执行，和windows下环境变量差不多。所以需要修改<code>vim /etc/profile</code>,在文件的<strong>最后</strong>添加如下配置然后执行<code>source /etc/profile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/nginx/sbin</span><br><span class="line">export PAHT</span><br><span class="line">//保存退出</span><br></pre></td></tr></table></figure></p><p>这样就可以将nginx命令配置到系统中，全局使用。然后开启服务<code>nginx</code>。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>上面的流程是出现大问题下，安装一步到位的。但实际过程中，我还是遇到了很多问题。对于新手的我也是耗费了不少时间和精力</p><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><p>在上面make时很可能会出现<br><code>make: *** No rule to make target</code>build’, needed by <code>default&#39;. Stop.</code><br>这很可能就是依赖缺失的原因。这里直接给出网上的<a href="https://www.cnblogs.com/zrbfree/p/6419043.html" target="_blank" rel="noopener">解决方法</a>，最好直接安装所有的依赖，避免多次操作。<br>安装完成后成需要删除上部操作configure的中间文件,也就是解压后文件目录下的objs文件，然后重新configure，再继续安装操作。</p><h5 id="reload报错"><a href="#reload报错" class="headerlink" title="reload报错"></a>reload报错</h5><p>当执行<code>nginx -s reload</code>报错 <code>&quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code>时，莫慌，这是因为你的nginx根本就没启动，何来重启一说。<br>因为reload 操作其实并非简单的关闭服务，再开启服务。具体如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. Nginx的master进程检查配置文件的正确性，若是错误则返回错误信息，nginx继续采用原配置文件进行工作（因为worker未受到影响）</span><br><span class="line"></span><br><span class="line">2. Nginx启动新的worker进程，采用新的配置文件</span><br><span class="line"></span><br><span class="line">3. Nginx将新的请求分配新的worker进程</span><br><span class="line"></span><br><span class="line">4. Nginx等待以前的worker进程的全部请求已经都返回后，关闭相关worker进程</span><br><span class="line"></span><br><span class="line">5. 重复上面过程，知道全部旧的worker进程都被关闭掉。</span><br></pre></td></tr></table></figure></p><p>所以，重启之后，master的进程号不变，worker的进程号会改变。所以直接reload会找不到pid文件。只需要开启服务即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;自从接触web开发以来，一直是在apache环境下进行开发的，最近看了很多面试要求，都有涉及到nginx，所以简单的尝试一下。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu php安装redis扩展</title>
    <link href="http://yoursite.com/2019/05/19/linux/Ubuntu-php%E5%AE%89%E8%A3%85redis%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2019/05/19/linux/Ubuntu-php安装redis扩展/</id>
    <published>2019-05-19T09:08:15.000Z</published>
    <updated>2019-05-19T10:00:37.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大学毕业至今，工作已有一年，然而感觉自己的技术发展实在缓慢，且有限。故在一年合同到期时决然辞职，渴望有个更好的工作学习环境，但是看着网上各种面试要求感觉凉凉。其中经常被提起的就是Redis等缓存技术，其实在过去的一年里面我也有主动的学习相关缓存知识，但是无奈工作项目中没有这方面的要求，无法得到更全面，深刻的认识。如今只能再拾起来应付面试这一关。</p><h3 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h3><p>我把redis安装在我自己的一台旧笔记本上，系统是Ubuntu19.04,已经装好了php7.2-dev，apche，mysql环境。我的想法是把这台笔记本为服务器，把另一台式机windows10作为客户端，简单的玩玩。</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h4><p>我们需要从网上下载相关的php-redis扩展包，这里我用了<a href="https://github.com/phpredis/phpredis" target="_blank" rel="noopener">github</a>,这里我用ssh来clone时，竟然失败！说社么Permisson denied (public key),切换到https，正常下载。<br>安装前先打印<code>phpinfo()</code>,在输出的页面中留意 <code>loaded configuration file</code>一栏的值，这里和下面的安装有着密切的关系</p><h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p>这里首先需要将下载的文件phpredis移动到合适的地方。然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd phpredis </span><br><span class="line">phpize //注意这里时phpize,不是phpsize 傻逼的我在这儿浑了</span><br></pre></td></tr></table></figure></p><p>如果上面你的phpize没有识别，那么请安装php dev环境(例如我的时7.2)。<br><code>sudo apt install php7.2-dev</code></p><p>之后键入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>如果返回结果出现警告，请无视它。然后修改你的php.ini文件，注意这里的php.ini文件时你的apache服务器(nginxy应该也是吧)加载的php.ini，也就是在上面我说道的<code>loaded configuration file</code>的值，(主要是因为我看了很多教程都是修改usr下的，但都失败)。所以在这个php.ini中添加下面<br><code>extension = {youre phpredis folder}/modules/redis.so  //花括号请注意替换</code><br>随后重启apache服务<br><code>service apache2 restart</code><br>刷新之前写好的phpinfo页面 搜索并存在 redis surpport的话，则安装成功！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大学毕业至今，工作已有一年，然而感觉自己的技术发展实在缓慢，且有限。故在一年合同到期时决然辞职，渴望有个更好的工作学习环境，但是看着网上各种
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo新建文章同时，打开编辑器</title>
    <link href="http://yoursite.com/2019/05/17/doc/Hexo%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/05/17/doc/Hexo脚本/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:16:50.993Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var spawn = require(&apos;child_process&apos;).exec;</span><br><span class="line"></span><br><span class="line">// Hexo 2.x 用户复制这段</span><br><span class="line">hexo.on(&apos;new&apos;, function(path)&#123;</span><br><span class="line">spawn(&apos;start  &quot;支持Markdonw语法的编辑器路径&quot; &apos; + path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Hexo 3 用户复制这段</span><br><span class="line">hexo.on(&apos;new&apos;, function(data)&#123;</span><br><span class="line">spawn(&apos;start  &quot;支持Markdonw语法的编辑器路径&quot; &apos; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="博客教程" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>日志1</title>
    <link href="http://yoursite.com/2019/05/17/diary/%E6%97%A5%E5%BF%971/"/>
    <id>http://yoursite.com/2019/05/17/diary/日志1/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:15:18.328Z</updated>
    
    <content type="html"><![CDATA[<p>开个小差写个日志。(离职前一个星期)<br>　　一年的合同到期，我没有选择续签合同，多方面原因。薪资算一个大头，其次就是发展方向。在这个单位太安逸了，安逸的像养老。855工作而且做的还不是自己最喜欢的后端开发。自身技术水平发展实在太慢。<br>　　已经投了简历，但回应的少之又少。期待明天会有点收获。<br>　　除去职业上的发展，我觉的自身也需要额外注意，当然不是生理，而是心理。我以为我早就摆脱毕业的孤独感，但是没想到它至今依旧缠绕着我。可能还是我太闲(咸)了吧。每晚回去除了看教学视频，找不到一个可以交流的人。不管实在小李走之前还是走之后。<br>　　记一下小李(李庆达)吧，万一时间长了怕忘了。这个假东北，跟女孩讲话都会羞射，沉迷手游，满腹的感慨与怀旧就像此刻的我。他已经在前两个礼拜离职了，留下我孤寡老人。虽说相处一年不到，但吃住都是一起，也相处非常不错。希望他往后一帆风顺，生活美满。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开个小差写个日志。(离职前一个星期)&lt;br&gt;　　一年的合同到期，我没有选择续签合同，多方面原因。薪资算一个大头，其次就是发展方向。在这个单位太安逸了，安逸的像养老。855工作而且做的还不是自己最喜欢的后端开发。自身技术水平发展实在太慢。&lt;br&gt;　　已经投了简历，但回应的少之
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>iCheck选中事件</title>
    <link href="http://yoursite.com/2019/05/17/web/iCheck%E9%80%89%E4%B8%AD%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/05/17/web/iCheck选中事件/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:25:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>在项目遇到给icheck插件下的checkbox添加事件的问题，查询得知：<br>选中事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#iCheck&quot;).on(&quot;ifChecked,function()&#123;</span><br><span class="line">        //your code</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>取消选中事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#iCheck&quot;).on(&quot;ifUnchecked&quot;,function()&#123;</span><br><span class="line">        //your code</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><em>上述id注意换成实际id或者其他筛选器。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目遇到给icheck插件下的checkbox添加事件的问题，查询得知：&lt;br&gt;选中事件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JQGrid 添加操作列(2)</title>
    <link href="http://yoursite.com/2019/05/17/web/JQGrid%20%E6%B7%BB%E5%8A%A0%E6%93%8D%E4%BD%9C%E5%88%97(2)/"/>
    <id>http://yoursite.com/2019/05/17/web/JQGrid 添加操作列(2)/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:24:41.290Z</updated>
    
    <content type="html"><![CDATA[<p>在我上一篇文章中，写了关于jqGrid追加操作列的方法，今天在项目中发现了一个问题：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在colModel中添加(记得在colNames中加入&apos;操作&apos;)</span><br><span class="line">  &#123;name:&apos;id&apos;,index:&apos;id&apos;,align:&apos;center&apos;,edittype:&apos;button&apos;,formatter:function(cellValue,options,rowData)&#123;  </span><br><span class="line">        //console.log(cellValue);</span><br><span class="line">        //console.log(options);</span><br><span class="line">        //console.log(rowData);</span><br><span class="line">         btnstr=&quot;&lt;button class=&apos;btn btn-danger&apos; onclick=&apos;delRow(&quot;+rowData.id+&quot;)&apos; &gt;删除&lt;/button&gt;&quot;;</span><br><span class="line">         return btnstr</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>　　以上述代码为例，我的实际项目中，我的表格还有双击行弹窗编辑，故我需要传递id值到弹窗层，且要显示双击行的数据，因为我用了layer，所有数据都传过去有点麻烦(我的水平有限)，所以选择传id，通过id来查询相关数据。<br>　　但是我在进行上面操作时发现，我传过去的id值有问题，后来console才知道，id已经变了。我想应该是这里操作列配置有问题。因为这里用了name:’id’,导致return回的值覆盖了原本行数据中id值。<br>console输出：<br>　　id: “<button class="btn btn-danger" onclick="delRow(3)">删除</button>“<br>故只需将name:’id’，改为不存在的字段即可,改动如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在colModel中添加(记得在colNames中加入&apos;操作&apos;)</span><br><span class="line">  &#123;name:&apos;option&apos;,index:&apos;option&apos;,align:&apos;center&apos;,edittype:&apos;button&apos;,formatter:function(cellValue,options,rowData)&#123;  </span><br><span class="line">        //console.log(cellValue);</span><br><span class="line">        //console.log(options);</span><br><span class="line">        //console.log(rowData);</span><br><span class="line">         btnstr=&quot;&lt;button class=&apos;btn btn-danger&apos; onclick=&apos;delRow(&quot;+rowData.id+&quot;)&apos; &gt;删除&lt;/button&gt;&quot;;</span><br><span class="line">         return btnstr</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>console输出：<br>　　id依旧存在且不变<br>　　新增option: “<button class="btn btn-danger" onclick="delRow(3)">删除</button>“<br><em>如有错误不足之处，请多回复指正，不甚言谢</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我上一篇文章中，写了关于jqGrid追加操作列的方法，今天在项目中发现了一个问题：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JQGrid 开启TreeGrid</title>
    <link href="http://yoursite.com/2019/05/17/web/JQGrid%20%E5%BC%80%E5%90%AFTreeGrid/"/>
    <id>http://yoursite.com/2019/05/17/web/JQGrid 开启TreeGrid/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:24:34.116Z</updated>
    
    <content type="html"><![CDATA[<p> 在按照任务写一个web app时，使用了jqGrid表格插件其中使用了TreeGrid，查了许多教程，调整了很多方面，遇到不少的坑。在这里记录一下。 要使用jqgrid的treegrid功能需要开启treegrid功能,配置代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#table_list_2&quot;).jqGrid(&#123;</span><br><span class="line">            url:&quot;&#123;:url(&apos;Table/load_treeGrid&apos;)&#125;&quot;,//表格数据初步加载请求地址　tp5写法</span><br><span class="line">            datatype:&quot;json&quot;,//返回数据类型　必须写</span><br><span class="line">            height: &quot;100%&quot;,</span><br><span class="line">            width:&apos;100%&apos;,</span><br><span class="line">            autowidth: true,</span><br><span class="line">            shrinkToFit: true,//表格宽度自动充满</span><br><span class="line">            sortable:true,//开启可拖动功能</span><br><span class="line">            treeGrid:true,//开启treegrid功能</span><br><span class="line">            // multiSort: true,//组合查询功能</span><br><span class="line">            colNames:[&apos;部门代号&apos;,&apos;id&apos;,&apos;部门名称&apos;,&apos;部门类型&apos;,&apos;负责人&apos;,&apos;联系号码&apos;,&apos;录入日期&apos;,&apos;修改日期&apos;,&apos;状态&apos;],//自定义列明　　需要和下面colmodel一一对应</span><br><span class="line">            colModel:[</span><br><span class="line">                &#123;name:&apos;scost_no&apos;,index:&apos;scost_no&apos;,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;id&apos;,index:&apos;id&apos;,hidden:true,key:true&#125;,//开启treegrid功能情况下 id(类似字段)必须有　</span><br><span class="line">                &#123;name:&apos;dept_name&apos;,index:&apos;dept_name&apos;,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;dept_type&apos;,index:&apos;dept_type&apos;,sortable:false,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;leader&apos;,index:&apos;leader&apos;,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;tel&apos;,index:&apos;tel&apos; ,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;date_entry&apos;,index:&apos;date_entry&apos;,formatter:&quot;date&quot;,formatoptions:&#123;srcformat:&apos;Y-m-d H:i:s&apos;,newformat:&apos;Y-m-d&apos;&#125;,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;date_update&apos;,index:&apos;date_update&apos;,formatter:&quot;date&quot;,formatoptions:&#123;srcformat:&apos;Y-m-d H:i:s&apos;,newformat:&apos;Y-m-d&apos;&#125;,align:&quot;left&quot;&#125;,</span><br><span class="line">                &#123;name:&apos;status&apos;,index:&apos;status&apos;,align:&quot;left&quot;&#125;,</span><br><span class="line">            ],</span><br><span class="line">            pager:true,//开启分页(treegrid　无需开启)</span><br><span class="line">            jsonReader:&#123;</span><br><span class="line">                root:&quot;data&quot;,</span><br><span class="line">                repeatitems: false  </span><br><span class="line">            &#125;,//关键配置　jqgrid 默认对返回json有特殊的要求，变态到名称也是固定的。所以需要特殊配置。自定义的话　repeatiteams:false</span><br><span class="line">            treeGridModel:&apos;adjacency&apos;,//treegrid　返回ｊｓｏｎ规定的字段类型  默认nested </span><br><span class="line">            ExpandCloumn:&apos;scost_no&apos;,//树形结构icons显示的字段　最好是colModel的第一个 </span><br><span class="line">            ExpandColClick:true,//允许点击行来收缩折叠</span><br><span class="line">      treeReader : &#123;  </span><br><span class="line">           level_field: &quot;level&quot;,  //等级　</span><br><span class="line">           parent_id_field: &quot;parent&quot;,  //父id</span><br><span class="line">           leaf_field: &quot;isLeaf&quot;,  //是否是子节点</span><br><span class="line">                 expanded_field: &quot;expanded&quot; //是否已展开</span><br><span class="line">              </span><br><span class="line">            &#125;,//类似jsonreader　可自定义treegrid返回数据中必要字段的属性名 这里是adjacency　对应treeGridModel　注:这里的字段是返回数据必须的</span><br><span class="line">            hidegrid: false</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>上面简要的给配置属性添加了备注，基本是常用的，基于自己的理解可能有些错误。<br>这里写一下我遇到的坑:我给设置了ExpandCloumn:”socst_no” 但是colModel的顺序为id,scost_no,…。改为scost_no,id就行了就是这么简单愣是浪费我半天时间。shit!　<br>其实这些东西都是我看了网上的博客后写的。但在上面的这个坑可没人提及。<br><em>本文用到的jqgrid是inspinia中的　jqgrid版本4.6.0</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 在按照任务写一个web app时，使用了jqGrid表格插件其中使用了TreeGrid，查了许多教程，调整了很多方面，遇到不少的坑。在这里记录一下。 要使用jqgrid的treegrid功能需要开启treegrid功能,配置代码如下:&lt;br&gt;&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>JQGrid 添加操作列</title>
    <link href="http://yoursite.com/2019/05/17/web/JQGrid%20%E6%B7%BB%E5%8A%A0%E6%93%8D%E4%BD%9C%E5%88%97/"/>
    <id>http://yoursite.com/2019/05/17/web/JQGrid 添加操作列/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:24:48.407Z</updated>
    
    <content type="html"><![CDATA[<p>在jqGrid生成的表格最后一列追加操作列：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在colModel中添加(记得在colNames中加入&apos;操作&apos;)</span><br><span class="line">  &#123;name:&apos;id&apos;,index:&apos;id&apos;,align:&apos;center&apos;,edittype:&apos;button&apos;,formatter:function(cellValue,options,rowData)&#123;  </span><br><span class="line">        //console.log(cellValue);</span><br><span class="line">        //console.log(options);</span><br><span class="line">        //console.log(rowData);</span><br><span class="line">         btnstr=&quot;&lt;button class=&apos;btn btn-danger&apos; onclick=&apos;delRow(&quot;+rowData.id+&quot;)&apos; &gt;删除&lt;/button&gt;&quot;;</span><br><span class="line">         return btnstr</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;name:&apos;id&apos;,index:&apos;id&apos;,align:&apos;center&apos;,edittype:&apos;button&apos;,formatter:btn_del&#125;</span><br><span class="line">function btn_del(cellValue,options,rowData)&#123;</span><br><span class="line">           console.log(cellValue,options,rowData);</span><br><span class="line">           btnstr=&quot;&lt;button class=&apos;btn btn-danger&apos; onclick=&apos;delRow(&quot;+rowData.id+&quot;)&apos; &gt;删除&lt;/button&gt;&quot;;</span><br><span class="line">           return btnstr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br>  　cellValue输出的是单元格值(例子中为id的值)<br>  　options输出的是表格配置相关的json对象<br>  　rowObject输出的是当前行的数据json对象<br>  　那么就通过rowObject就可得到当前行数据的id(不是序列号),从而实现操作<br>注意事项：<br>   name属性最好选择当前行数据的id<br>  除了cellValue,option,rowData还有第四个参数输出为”add”(暂不知什么作用，吊大的请回复，学学习)<br>具体api请看官方文档<a href="http://www.trirand.com/jqgridwiki/doku.php?id=wiki:custom_formatter" target="_blank" rel="noopener">http://www.trirand.com/jqgridwiki/doku.php?id=wiki:custom_formatter</a><br><em>本文中用是jqGrid 4.6.0 新手学习,有错请回复指出，不甚言谢</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在jqGrid生成的表格最后一列追加操作列：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>WSL链接ECS</title>
    <link href="http://yoursite.com/2019/05/17/linux/WSL%E9%93%BE%E6%8E%A5ECS/"/>
    <id>http://yoursite.com/2019/05/17/linux/WSL链接ECS/</id>
    <published>2019-05-17T01:53:34.000Z</published>
    <updated>2019-05-17T03:13:49.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>前阵子闲着无聊，买了一个月的阿里云ECS来折腾一下。经过不懈努力，天翻地覆的找资料，终于安装好了wordpress，勉强弄好了一个简易博客。(坑爹的阿里要买三个月的才能备案，绑定域名)，后来看到了Windows的开发者大会，了解了WSL这个新奇的玩意儿，忽然想起之前链接ECS的服务器太麻烦了，也没用Ubuntu原生terminal的感觉，在初步了解WSL后我决定替换以前的方法。其实WSL远程链接ECS就是找个linux链接ECS的方法，但是毕竟在Windows主机上弄，我只想说尽是些花里胡哨的，但是酷啊！（另外不得不夸奖一下微软对开源的态度，真的原来越棒，真香）。<br>闲话少说！开始正题！关于WSL的安装我就不细说了，因为网上有太多的答案，随便找个的<a href="https://www.jianshu.com/p/6b02948b3d37" target="_blank" rel="noopener">https://www.jianshu.com/p/6b02948b3d37</a><br>我装的是Ubuntu18.04</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>阿里云官方推荐了<strong>两个*</strong>Linux ssh链接ECS的方法</p><h4 id="第一个："><a href="#第一个：" class="headerlink" title="第一个："></a>第一个：</h4><p>初次使用,设置.pem密钥文件的权限为400<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 400 密钥路径</span><br></pre></td></tr></table></figure></p><p>开始链接:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i [密钥路径] username@ip</span><br></pre></td></tr></table></figure></p><p><em>这个方法除了第一次设置一下权限，算是很方便了，但是对我来说链接部分实在有点难以接受，果断放弃</em></p><h4 id="第二个："><a href="#第二个：" class="headerlink" title="第二个："></a>第二个：</h4><p>配置ssh_config文件：<br><em>备份配置文件，养成好习惯</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/ssh/ssh_config /etc/ssh/ssh_config_bak</span><br><span class="line">sudo vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure></p><p>添加或修改属性如下<em>官方配置</em><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ecs//实例名 随便取，简单最好</span><br><span class="line">HostName ip //自己服务器的ip地址</span><br><span class="line">Port 22</span><br><span class="line">User root</span><br><span class="line">IdentityFile ~/.ssh/privatekey.pem//密钥的路径</span><br></pre></td></tr></table></figure></p><p>接着保存并重启<em>注意这里的环境是WSL,没有sytemctl</em><br>重启服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure></p><p>开始链接:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ecs //自己的实例名</span><br></pre></td></tr></table></figure></p><p>出现下面提示代表链接成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br></pre></td></tr></table></figure></p><p>以后使用只需简短的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ecs</span><br></pre></td></tr></table></figure></p><p><em>如果不行请先看下面填坑的内容</em></p><h3 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h3><p>当然上面的过程是我在经过半天摸索后的达到效果，中间还有一大堆的坑</p><h4 id="一-重装openssh"><a href="#一-重装openssh" class="headerlink" title="一:重装openssh"></a>一:重装openssh</h4><p>WSL安装好后自带了openssh,但是测试后不好使，查找资料发现是版本的问题，具体没深究，既然如此那么只有重装了，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove openssh-server</span><br><span class="line">//不知道为啥，他还提示我client版本也不对，没法也得重装</span><br><span class="line">sudo apt remove openssh-client</span><br></pre></td></tr></table></figure></p><p><em>接下来就遇到一个大坑</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br><span class="line">sudo apt install openssh-client</span><br></pre></td></tr></table></figure></p><p>上面的安装命令的结果都是报错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: Could not read response to hello message from hook [ ! -f /usr/bin/snap ] || /usr/bin/snap advise-snap --from-apt 2&gt;/dev/null || true: Success</span><br></pre></td></tr></table></figure></p><p>这是什么鬼玩意儿，百度没找到，还好有谷歌<br><a href="https://askubuntu.com/questions/1123159/wsl-ubuntu-18-04-broken-apt?answertab=oldest#tab-top" target="_blank" rel="noopener">https://askubuntu.com/questions/1123159/wsl-ubuntu-18-04-broken-apt?answertab=oldest#tab-top</a><br>有个解决方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/apt/apt.conf.d/20snapd.conf</span><br></pre></td></tr></table></figure></p><p>楼主它下面的回复是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Quick and dirty, but it did the trick.</span><br></pre></td></tr></table></figure></p><p>我也尝试了一下，ojbk（具体原因不去弄懂，感觉很麻烦的说）</p><h4 id="二：ssh安装和权限设置"><a href="#二：ssh安装和权限设置" class="headerlink" title="二：ssh安装和权限设置"></a>二：ssh安装和权限设置</h4><p>上面的openssh安装好后，按照官方的教程还是有问题的</p><h5 id="1："><a href="#1：" class="headerlink" title="1："></a>1：</h5><p>这里是WSL，但是我的.pem密钥文件在其他硬盘，一开始我很傻逼直接写成下面这样子<br><code>IdentityFile D:\linux\key.pem</code><br>这是因为WSL和linux一样是挂载了硬盘,所以应该改为<br><code>IdentityFile  /mnt/d/linux/key.pem</code></p><h5 id="2"><a href="#2" class="headerlink" title="2:"></a>2:</h5><p>改好后测试结果出现了一个更奇葩的问题，弹出默认权限777太open了，不允许链接，那好按照官方的改为400但是发现不对，因为linux和windows权限不一样，所以无法修改，因而复制密钥文件到~/.ssh下再修改<br><code>sudo chmod 400 ~/.ssh/key.pem</code><br>那么<br><code>IdentityFile ~/.ssh/key.pem</code><br>3:如果当前登录身份为root可能会报错：<br><code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic)</code><br>那么请切换到普通用户登录，这个问题我也看到相关的解决方法就是简单在ssh_config添加<br><code>PermitRootLogin yes</code><br>但是没成功。因为没啥影响，就不深究下去</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;闲话&quot;&gt;&lt;a href=&quot;#闲话&quot; class=&quot;headerlink&quot; title=&quot;闲话&quot;&gt;&lt;/a&gt;闲话&lt;/h3&gt;&lt;p&gt;前阵子闲着无聊，买了一个月的阿里云ECS来折腾一下。经过不懈努力，天翻地覆的找资料，终于安装好了wordpress，勉强弄好了一个简易博客。
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
